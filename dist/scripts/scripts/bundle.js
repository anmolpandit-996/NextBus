const apiKey="AU_jMzvljRU2bGPyGkq0",streetUrl=`https://api.winnipegtransit.com/v3/streets.json?api-key=${apiKey}`,stopsUrl=`https://api.winnipegtransit.com/v3/stops.json?api-key=${apiKey}`,searchForm=document.forms[0],streetOptionsEle=document.querySelector(".streets"),titleBarEle=document.querySelector("#street-name"),searchStreet=async e=>{const t=await fetch(`${streetUrl}&name=${e}`);e=await t.json();return Response.ok||(titleBarEle.innerHTML="No such street found"),e.streets},getStops=async e=>{const t=await fetch(`${stopsUrl}&street=${e}&usage=long`);return(await t.json()).stops},getStopSchedule=async e=>{const t=await fetch(`https://api.winnipegtransit.com/v3/stops/${e}/schedule.json?api-key=${apiKey}`);return await t.json()},renderStreetsNameHTML=e=>{streetOptionsEle.innerHTML="";for(var t of e)streetOptionsEle.innerHTML+=`<a href="#" data-street-key=${t.key}>${t.name}</a>`},renderTitleBar=e=>{titleBarEle.innerHTML=`Displaying results for ${e[0].street.name}`},renderSchedule=e=>{const t=document.getElementsByTagName("tbody");t[0].innerHTML="";for(var s of e){var r=s["stop-schedule"]["route-schedules"][0]["scheduled-stops"][0].times.arrival.scheduled,r=new Date(r).toLocaleTimeString(void 0,{hour:"2-digit",minute:"2-digit"});t[0].innerHTML+=`
  <tr>
    <td>${s["stop-schedule"].stop.name}</td>
    <td>${s["stop-schedule"].stop["cross-street"].name}</td> 
    <td>${s["stop-schedule"].stop.direction}</td>
    <td>${s["stop-schedule"]["route-schedules"][0].route.number}</td>
    <td>${r}</td>
  </tr>
    `}};searchForm.addEventListener("submit",e=>{e.preventDefault(),searchStreet(e.target[0].value).then(e=>{renderStreetsNameHTML(e)})}),streetOptionsEle.addEventListener("click",e=>{e=e.target.getAttribute("data-street-key");getStops(e).then(t=>{const s=[];t.forEach(e=>{s.push(getStopSchedule(e.key))}),Promise.all(s).then(e=>{0!==e.length?(renderTitleBar(t),renderSchedule(e)):alert("Sorry for the inconvenience, no schedule available for now ")})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJhcGlLZXkiLCJzdHJlZXRVcmwiLCJzdG9wc1VybCIsInNlYXJjaEZvcm0iLCJkb2N1bWVudCIsImZvcm1zIiwic3RyZWV0T3B0aW9uc0VsZSIsInF1ZXJ5U2VsZWN0b3IiLCJ0aXRsZUJhckVsZSIsInNlYXJjaFN0cmVldCIsImFzeW5jIiwic3RyZWV0TmFtZSIsInJlcXVlc3QiLCJmZXRjaCIsImRhdGEiLCJqc29uIiwiUmVzcG9uc2UiLCJvayIsImlubmVySFRNTCIsInN0cmVldHMiLCJnZXRTdG9wcyIsInN0cmVldEtleSIsInN0b3BzIiwiZ2V0U3RvcFNjaGVkdWxlIiwic3RvcEtleSIsInJlbmRlclN0cmVldHNOYW1lSFRNTCIsInN0cmVldCIsImtleSIsIm5hbWUiLCJyZW5kZXJUaXRsZUJhciIsInJlbmRlclNjaGVkdWxlIiwic2NoZWR1bGVUQm9keSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2NoZWR1bGUiLCJzY2hlZHVsZUFycmF5IiwiYnVzRGV0YWlsZWRUaW1lIiwic2NoZWR1bGVkIiwiYnVzVGltZSIsIkRhdGUiLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJ1bmRlZmluZWQiLCJob3VyIiwibWludXRlIiwic3RvcCIsImRpcmVjdGlvbiIsInJvdXRlIiwibnVtYmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJ0YXJnZXQiLCJ2YWx1ZSIsInRoZW4iLCJnZXRBdHRyaWJ1dGUiLCJmb3JFYWNoIiwicHVzaCIsImVsZW1lbnQiLCJQcm9taXNlIiwiYWxsIiwic2NoZWR1bGVzIiwibGVuZ3RoIiwiYWxlcnQiXSwibWFwcGluZ3MiOiJBQUFBLE1BQUFBLE9BQUEsdUJBQ0FDLHFFQUFBRCxTQUNBRSxrRUFBQUYsU0FFQUcsV0FBQUMsU0FBQUMsTUFBQSxHQUNBQyxpQkFBQUYsU0FBQUcsY0FBQSxZQUNBQyxZQUFBSixTQUFBRyxjQUFBLGdCQUVBRSxhQUFBQyxNQUFBQyxJQUNBLE1BQUFDLFFBQUFDLFNBQUFaLGtCQUFBVSxLQUNBRyxRQUFBRixFQUFBRyxPQUlBLE9BSEFDLFNBQUFDLEtBQ0FULFlBQUFVLFVBQUEsd0JBRUFKLEVBQUFLLFNBSUFDLFNBQUFWLE1BQUFXLElBQ0EsTUFBQVQsUUFBQUMsU0FBQVgsbUJBQUFtQixnQkFHQSxhQUZBVCxFQUFBRyxRQUVBTyxPQUdBQyxnQkFBQWIsTUFBQWMsSUFDQSxNQUFBWixRQUFBQyxrREFDQVcsMkJBQUF4QixVQUlBLGFBRkFZLEVBQUFHLFFBS0FVLHNCQUFBLElBQ0FuQixpQkFBQVksVUFBQSxHQUNBLElBQUEsSUFBQVEsS0FBQVAsRUFDQWIsaUJBQUFZLDBDQUFBUSxFQUFBQyxPQUFBRCxFQUFBRSxZQUlBQyxlQUFBLElBQ0FyQixZQUFBVSxvQ0FBQUksRUFBQSxHQUFBSSxPQUFBRSxRQUdBRSxlQUFBLElBQ0EsTUFBQUMsRUFBQTNCLFNBQUE0QixxQkFBQSxTQUNBRCxFQUFBLEdBQUFiLFVBQUEsR0FFQSxJQUFBLElBQUFlLEtBQUFDLEVBQUEsQ0FDQSxJQUFBQyxFQUNBRixFQUFBLGlCQUFBLG1CQUFBLEdBQUEsbUJBQUEsR0FFQSxNQUFBLFFBQUFHLFVBRUFDLEVBQUEsSUFBQUMsS0FBQUgsR0FBQUksd0JBQUFDLEVBQUEsQ0FDQUMsS0FBQSxVQUNBQyxPQUFBLFlBR0FYLEVBQUEsR0FBQWI7O1VBRUFlLEVBQUEsaUJBQUFVLEtBQUFmO1VBQ0FLLEVBQUEsaUJBQUFVLEtBQUEsZ0JBQUFmO1VBQ0FLLEVBQUEsaUJBQUFVLEtBQUFDO1VBQ0FYLEVBQUEsaUJBQUEsbUJBQUEsR0FBQVksTUFBQUM7VUFDQVQ7O1FBTUFsQyxXQUFBNEMsaUJBQUEsU0FBQSxJQUNBQyxFQUFBQyxpQkFDQXhDLGFBQUF1QyxFQUFBRSxPQUFBLEdBQUFDLE9BQUFDLEtBQUEsSUFDQTNCLHNCQUFBWCxPQU1BUixpQkFBQXlDLGlCQUFBLFFBQUEsSUFDQTFCLEVBQUEyQixFQUFBRSxPQUFBRyxhQUFBLG1CQUNBakMsU0FBQUMsR0FBQStCLEtBQUEsSUFDQSxNQUFBbEIsRUFBQSxHQUNBcEIsRUFBQXdDLFFBQUEsSUFDQXBCLEVBQUFxQixLQUFBaEMsZ0JBQUFpQyxFQUFBN0IsUUFFQThCLFFBQUFDLElBQUF4QixHQUFBa0IsS0FBQSxJQUNBLElBQUFPLEVBQUFDLFFBQ0EvQixlQUFBZixHQUNBZ0IsZUFBQTZCLElBR0FFLE1BQUEiLCJmaWxlIjoic2NyaXB0cy9idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBhcGlLZXkgPSBcIkFVX2pNenZsalJVMmJHUHlHa3EwXCI7XG5jb25zdCBzdHJlZXRVcmwgPSBgaHR0cHM6Ly9hcGkud2lubmlwZWd0cmFuc2l0LmNvbS92My9zdHJlZXRzLmpzb24/YXBpLWtleT0ke2FwaUtleX1gO1xuY29uc3Qgc3RvcHNVcmwgPSBgaHR0cHM6Ly9hcGkud2lubmlwZWd0cmFuc2l0LmNvbS92My9zdG9wcy5qc29uP2FwaS1rZXk9JHthcGlLZXl9YDtcblxuY29uc3Qgc2VhcmNoRm9ybSA9IGRvY3VtZW50LmZvcm1zWzBdO1xuY29uc3Qgc3RyZWV0T3B0aW9uc0VsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc3RyZWV0c1wiKTtcbmNvbnN0IHRpdGxlQmFyRWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdHJlZXQtbmFtZVwiKTtcblxuY29uc3Qgc2VhcmNoU3RyZWV0ID0gYXN5bmMgKHN0cmVldE5hbWUpID0+IHtcbiAgY29uc3QgcmVxdWVzdCA9IGF3YWl0IGZldGNoKGAke3N0cmVldFVybH0mbmFtZT0ke3N0cmVldE5hbWV9YCk7XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcbiAgaWYoIVJlc3BvbnNlLm9rKXtcbiAgICB0aXRsZUJhckVsZSAuaW5uZXJIVE1MID1gTm8gc3VjaCBzdHJlZXQgZm91bmRgOyAgXG4gIH1cbiAgcmV0dXJuIGRhdGEuc3RyZWV0cztcbiAgXG59O1xuXG5jb25zdCBnZXRTdG9wcyA9IGFzeW5jIChzdHJlZXRLZXkpID0+IHtcbiAgY29uc3QgcmVxdWVzdCA9IGF3YWl0IGZldGNoKGAke3N0b3BzVXJsfSZzdHJlZXQ9JHtzdHJlZXRLZXl9JnVzYWdlPWxvbmdgKTtcbiAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuXG4gIHJldHVybiBkYXRhLnN0b3BzO1xufTtcblxuY29uc3QgZ2V0U3RvcFNjaGVkdWxlID0gYXN5bmMgKHN0b3BLZXkpID0+IHtcbiAgY29uc3QgcmVxdWVzdCA9IGF3YWl0IGZldGNoKFxuICAgIGBodHRwczovL2FwaS53aW5uaXBlZ3RyYW5zaXQuY29tL3YzL3N0b3BzLyR7c3RvcEtleX0vc2NoZWR1bGUuanNvbj9hcGkta2V5PSR7YXBpS2V5fWBcbiAgKTtcbiAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuXG4gIHJldHVybiBkYXRhO1xufTtcblxuY29uc3QgcmVuZGVyU3RyZWV0c05hbWVIVE1MID0gKHN0cmVldHMpID0+IHtcbiAgc3RyZWV0T3B0aW9uc0VsZS5pbm5lckhUTUwgPSBcIlwiO1xuICBmb3IgKGxldCBzdHJlZXQgb2Ygc3RyZWV0cykge1xuICAgIHN0cmVldE9wdGlvbnNFbGUuaW5uZXJIVE1MICs9IGA8YSBocmVmPVwiI1wiIGRhdGEtc3RyZWV0LWtleT0ke3N0cmVldC5rZXl9PiR7c3RyZWV0Lm5hbWV9PC9hPmA7XG4gIH1cbn07XG5cbmNvbnN0IHJlbmRlclRpdGxlQmFyID0gKHN0b3BzKSA9PiB7IFxuICB0aXRsZUJhckVsZS5pbm5lckhUTUwgPSBgRGlzcGxheWluZyByZXN1bHRzIGZvciAke3N0b3BzWzBdLnN0cmVldC5uYW1lfWA7XG59O1xuXG5jb25zdCByZW5kZXJTY2hlZHVsZSA9IChzY2hlZHVsZUFycmF5KSA9PiB7XG4gIGNvbnN0IHNjaGVkdWxlVEJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRib2R5XCIpO1xuICBzY2hlZHVsZVRCb2R5WzBdLmlubmVySFRNTCA9IFwiXCI7XG5cbiAgZm9yIChsZXQgc2NoZWR1bGUgb2Ygc2NoZWR1bGVBcnJheSkge1xuICAgIGNvbnN0IGJ1c0RldGFpbGVkVGltZSA9XG4gICAgICBzY2hlZHVsZVtcInN0b3Atc2NoZWR1bGVcIl1bXCJyb3V0ZS1zY2hlZHVsZXNcIl1bMF1bXCJzY2hlZHVsZWQtc3RvcHNcIl1bMF1bXG4gICAgICAgIFwidGltZXNcIlxuICAgICAgXVtcImFycml2YWxcIl0uc2NoZWR1bGVkO1xuXG4gICAgY29uc3QgYnVzVGltZSA9IG5ldyBEYXRlKGJ1c0RldGFpbGVkVGltZSkudG9Mb2NhbGVUaW1lU3RyaW5nKHVuZGVmaW5lZCwge1xuICAgICAgaG91cjogXCIyLWRpZ2l0XCIsXG4gICAgICBtaW51dGU6IFwiMi1kaWdpdFwiLFxuICAgIH0pO1xuXG4gICAgc2NoZWR1bGVUQm9keVswXS5pbm5lckhUTUwgKz0gYFxuICA8dHI+XG4gICAgPHRkPiR7c2NoZWR1bGVbXCJzdG9wLXNjaGVkdWxlXCJdLnN0b3AubmFtZX08L3RkPlxuICAgIDx0ZD4ke3NjaGVkdWxlW1wic3RvcC1zY2hlZHVsZVwiXS5zdG9wW1wiY3Jvc3Mtc3RyZWV0XCJdLm5hbWV9PC90ZD4gXG4gICAgPHRkPiR7c2NoZWR1bGVbXCJzdG9wLXNjaGVkdWxlXCJdLnN0b3AuZGlyZWN0aW9ufTwvdGQ+XG4gICAgPHRkPiR7c2NoZWR1bGVbXCJzdG9wLXNjaGVkdWxlXCJdW1wicm91dGUtc2NoZWR1bGVzXCJdWzBdLnJvdXRlLm51bWJlcn08L3RkPlxuICAgIDx0ZD4ke2J1c1RpbWV9PC90ZD5cbiAgPC90cj5cbiAgICBgO1xuICB9XG59O1xuXG5zZWFyY2hGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2ZW50KSA9PiB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIHNlYXJjaFN0cmVldChldmVudC50YXJnZXRbMF0udmFsdWUpLnRoZW4oKGRhdGEpID0+IHtcbiAgICByZW5kZXJTdHJlZXRzTmFtZUhUTUwoZGF0YSk7XG4gICAgXG4gIH0pO1xuICBcbn0pO1xuXG5zdHJlZXRPcHRpb25zRWxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgbGV0IHN0cmVldEtleSA9IGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN0cmVldC1rZXlcIik7XG4gIGdldFN0b3BzKHN0cmVldEtleSkudGhlbigoZGF0YSkgPT4ge1xuICAgIGNvbnN0IHNjaGVkdWxlQXJyYXkgPSBbXTtcbiAgICBkYXRhLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgIHNjaGVkdWxlQXJyYXkucHVzaChnZXRTdG9wU2NoZWR1bGUoZWxlbWVudC5rZXkpKTtcbiAgICB9KTtcbiAgICBQcm9taXNlLmFsbChzY2hlZHVsZUFycmF5KS50aGVuKChzY2hlZHVsZXMpID0+IHtcbiAgICAgaWYoc2NoZWR1bGVzLmxlbmd0aCE9PTApe1xuICAgICAgcmVuZGVyVGl0bGVCYXIoZGF0YSk7XG4gICAgICByZW5kZXJTY2hlZHVsZShzY2hlZHVsZXMpO1xuICAgICAgXG4gICAgIH1lbHNle1xuICAgICAgICBhbGVydCgnU29ycnkgZm9yIHRoZSBpbmNvbnZlbmllbmNlLCBubyBzY2hlZHVsZSBhdmFpbGFibGUgZm9yIG5vdyAnKTtcbiAgICAgfVxuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19
